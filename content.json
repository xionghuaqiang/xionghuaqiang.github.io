{"pages":[{"title":"Android","text":"","link":"/Android/index.html"},{"title":"最近正在写一份Java入门文档","text":"","link":"/Java/index.html"},{"title":"休闲音乐","text":"","link":"/%E4%BC%91%E9%97%B2%E9%9F%B3%E4%B9%90/index.html"},{"title":"About me","text":"瞎搞","link":"/about/me.html"}],"posts":[{"title":"Android新建项目R出现爆红","text":"Android新建项目R爆红，怎么弄也解决不了问题如图： 解决方案：将 Android Studio安装文件夹下\\plugins\\android\\lib\\templates\\gradle-projects\\NewAndroidModule\\root\\res中每个出错的xml文件用记事本打开，原文剪切再粘贴回去。","link":"/2020/03/03/Android%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AER%E5%87%BA%E7%8E%B0%E7%88%86%E7%BA%A2/"},{"title":"Flutter启动页以及下拉刷新学习","text":"页面刷新以及启动图加载1.启动图制作drawable下 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!-- Modify this file to customize your launch splash screen --&gt;&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:drawable=&quot;@mipmap/launch_image&quot;&gt;&lt;/item&gt; &lt;!-- You can insert your own image assets here --&gt; &lt;item&gt; &lt;bitmap android:gravity=&quot;fill&quot; android:mipMap=&quot;true&quot; //你的加载图片 android:src=&quot;@mipmap/launch_image&quot; /&gt; &lt;/item&gt;&lt;/layer-list&gt; 2.实现页面刷新​ 参考文档：https://www.cnblogs.com/upwgh/p/11435721.html 当列表的数据非常多时，需要使用长列表，比如淘宝后台的订单列表，手机通讯录等，这些列表项数据很多，长列表也是使用ListView作为基础组件，只不过需要添加一个列表项构造器itemBuilder。Flutter的长列表组件其实相当于Android中的RecyclerView，它会自动为您回收列表元素。在创建ListView.builder时，需要传入两个参数，一个列表的初始长度，一个itemBuilder函数。ListVIew还支持基于Sliver的延迟构建模型。 ​ 基于Sliver的延迟构建模式： 通常可滚动组件的子组件可能会非常多，占用的总高度也会非常大，如果要一次性将子组件全部构建出将会导致性能差的问题出现，为此，Flutter中提出一个Sliver（中文为”薄片”的意思）概念，如果一个可滚动组件支持Sliver模型，那么该滚动组件可以将子组件分成好多个薄片（Sliver），只有当Sliver出现在视口时才会去构建它，这种模型也成为”基于Sliver的延迟构建模型”。可滚动组件中有很多都支持基于Sliver的延迟构建模型，如ListView、GridView，但是也有不支持该模型的，如SingleChildScrollView。 1.使用ListVIew.separated给列表项之间添加一个分割组件 1234567891011121314151617181920212223242526272829303132333435import 'package:flutter/material.dart';void main() =&gt; runApp(DemoApp());class DemoApp extends StatelessWidget { //初始化数据源 final List&lt;String&gt; items = new List&lt;String&gt;.generate(200, (i)=&gt;&quot;Item $i&quot;); @override Widget build(BuildContext context) { return new MaterialApp( title: 'SingleChildScrollView Demo', home: new Scaffold( appBar: AppBar( title: new Text('SingleChildScrollView Demo'), ), body:new ListView.separated( //列表滑动到边界时，显示iOS的弹出效果 physics: BouncingScrollPhysics(), itemCount: items.length, //列表项构造器 itemBuilder: (context,index){ return ListTile(title: new Text('${items[index]}'),); }, //分割构造器 separatorBuilder: (context,index){ //分割组件 return new Divider(color: Colors.blue,); }, ), ), ); }} 下拉刷新Flutter给我们提供了下拉刷新功能RefreshIndicator的组件，先整体说明一下下面Demo的代码逻辑，其实很简单，body返回一个RefreshIndicator组件，在该组件内的子组件是一个ListView，重点说一下RefreshIndicator的下拉回调方法onRefresh，在回调方法内延迟2秒中后将list内容清空，并且重新给list列表添加新的数据。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import 'package:flutter/material.dart';import 'package:flutterlogin/file/uploadFile.dart';import 'package:flutterlogin/file/custome_router.dart';class AirplayScreen extends StatefulWidget{ @override State&lt;StatefulWidget&gt; createState() { // TODO: implement createState return new _Refresh(); }}class _Refresh extends State&lt;AirplayScreen&gt;{ var _items = new List&lt;String&gt;(); @override void initState() { // TODO: implement initState super.initState(); getData(); } @override Widget build(BuildContext context) { return new MaterialApp( title: '消息', home: new Scaffold( appBar: new AppBar( title: new Text('消息'), ), body: new RefreshIndicator( onRefresh: _onRefresh, child: new ListView.separated(itemBuilder: (context,index){ return ListTile( title: new Text('${_items[index]}'), ); }, //分割构造器 separatorBuilder: (context,index){ return new Divider(color: Colors.blue,); }, //_items.length + 1是为了给最后一行的加载loading留出位置 itemCount:_items.length ), ), ), ); } void getData() { //初始数据源 for (int i=0;i&lt;20;i++){ _items.insert(_items.length, &quot;第${_items.length}条原始数据&quot;); print(_items[i]); } } Future&lt;void&gt; _onRefresh() async { await Future.delayed(Duration(seconds: 2)).then((e){ setState(() { _items.clear(); for (int i=0;i&lt;20;i++){ _items.insert(_items.length, &quot;第${_items.length}条下拉刷新后的数据&quot;); } }); }); } @override void dispose() { super.dispose(); }} 这里需要注意的是，onRefresh回调方法要增加async….await，不然会出现下拉刷新的loading不会消失的问题： 12345678910Future&lt;void&gt; _onRefresh() async { await Future.delayed(Duration(seconds: 2)).then((e){ setState(() { _items.clear(); for (int i=0;i&lt;20;i++){ _items.insert(_items.length, &quot;第${_items.length}条下拉刷新后的数据&quot;); } }); }); } 效果: ​","link":"/2020/06/28/Flutter%E5%90%AF%E5%8A%A8%E9%A1%B5%E4%BB%A5%E5%8F%8A%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%AD%A6%E4%B9%A0/"},{"title":"Flutter 入门Text Image ListView简单案例","text":"1.创建第一个Flutter项目替换 lib/main.dart. 删除lib / main.dart中的所有代码，然后替换为下面的代码，它将在屏幕的中心显示“Hello World”. 1234567891011121314151617181920//库的导入import 'package:flutter/material.dart';//程序入口void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Welcome to Flutter', home: new Scaffold( appBar: new AppBar( title: new Text('Welcome to Flutter'), ), body: new Center( //布局组件 child: new Text('Hello World'), ), ), ); }} 效果： ​ Text Wdige使用12345678910111213141516171819202122232425262728293031323334import 'package:flutter/material.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'First Flutter', home: new Scaffold( appBar: new AppBar( title: new Text( '主页' ), ), body: new Center( child: new Text( '当文字超过1行时，我可以使用textAlign标签来处理哟，试试看把', textAlign: TextAlign.center, //设置行数 maxLines: 1, //超出一行设置3个点 overflow: TextOverflow.ellipsis, //样式 style: TextStyle( //浮点数 fontSize: 25.0, ), ), ), ), ); }} Image引入123456789101112131415161718192021222324252627282930import 'package:flutter/material.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'First Flutter', home: new Scaffold( appBar: new AppBar( title: new Text( '主页' ), ), body: new Container( //network 网络地址 child: new Image.network( 'https://i.loli.net/2020/05/06/xEal2mK4PVMhTBn.png', //横向充满// fit: BoxFit.fitWidth, ), width: 500.0, height: 100.0, color: Colors.lightBlue, ), ), ); }} 效果： ListView使用12345678910111213141516171819202122232425262728293031323334353637import 'package:flutter/material.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'First Flutter', home: new Scaffold( appBar: new AppBar( title: new Text( '主页' ), ), body: new ListView( children:&lt;Widget&gt;[ new ListTile( leading: new Icon(Icons.account_balance), title: new Text('account_balance'), ), new ListTile( leading: new Icon(Icons.add_box), title: new Text('add_box'), ), new ListTile( leading: new Icon(Icons.alarm), title: new Text('alarm'), ), new Image.network('https://i.loli.net/2020/04/01/9h7YqAdsaS2ZOC5.jpg'), new Image.network('https://i.loli.net/2020/04/01/Fswye9IxVOiLUY6.jpg'), ] ), ), ); }} 效果","link":"/2020/06/02/Flutter%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"},{"title":"Flutter点击实现拨打电话","text":"1.创建服务TelAndSmsService .dart 1234567import 'package:url_launcher/url_launcher.dart';class TelAndSmsService { void call(String number) =&gt; launch(&quot;tel:$number&quot;); void sendSms(String number) =&gt; launch(&quot;sms:$number&quot;); void sendEmail(String email) =&gt; launch(&quot;mailto:$email&quot;);} 2.注册服务工具类1234GetIt locator = GetIt();void setupLocator() { locator.registerSingleton(TelAndSmsService());} 3.注册服务，注意注册服务放在程序刚开始加载时，要不然会导致多次注册12// 注册服务setupLocator(); 4.调用打电话123456final TelAndSmsService _service = locator&lt;TelAndSmsService&gt;();final String number = &quot;123456789&quot;;//点击事件onTap: (){ _service.call(number); }, 效果：​ 2.","link":"/2020/06/15/Flutter%E7%82%B9%E5%87%BB%E5%AE%9E%E7%8E%B0%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/"},{"title":"底部导航栏实现Demo","text":"​ 参考地址：https://jspang.com/detailed?id=45#toc28 主入口文件编写 首先我们先写一个主入口文件，这个文件只是简单的APP通用结构，最主要的是要引入自定义的BottomNavigationWidget组件。 main.dart代码如下(视频中会进行详细讲解) 123456789101112131415import 'package:flutter/material.dart';import 'bottom_navigation_widget.dart';void main()=&gt; runApp(new MyApp());class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title:'Flutter bottomNavigationBar', theme:ThemeData.light(), home:BottomNavigationWidget() ); }.} 注意的是BottomNaivgationWidget这个组件还没有编写，所以现在会报错。 StatefulWidget 讲解在编写BottomNaivgationWidget组件前，我们需要简单了解一下什么是StatefulWidget. StatefulWidget具有可变状态(state)的窗口组件（widget）。使用这个要根据变化状态，调整State值。 在lib目录下，新建一个bottom_navigation_widget.dart文件。 它的初始化和以前使用的StatelessWidget不同，我们在VSCode中直接使用快捷方式生成代码（直接在VSCode中输入stful）： 123456789101112class name extends StatefulWidget { _nameState createState() =&gt; _nameState();}class _nameState extends State&lt;name&gt; { @override Widget build(BuildContext context) { return Container( child: child, ); }} 上面的代码可以清楚的看到，使用StatefulWidget分为两个部分，第一个部分是继承与StatefullWidget，第二个部分是继承于State.其实State部分才是我们的重点，主要的代码都会写在State中。 BottomNaivgationWidget自定义接下来我们就要创建BottomNaivgationWidget这个Widget了，只是建立一个底部导航。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import 'package:flutter/material.dart';class BottomNavigationWidget extends StatefulWidget { _BottomNavigationWidgetState createState() =&gt; _BottomNavigationWidgetState();}class _BottomNavigationWidgetState extends State&lt;BottomNavigationWidget&gt; { final _BottomNavigationColor = Colors.blue; @override Widget build(BuildContext context) { return Scaffold( bottomNavigationBar: BottomNavigationBar( items: [ BottomNavigationBarItem( icon:Icon( Icons.home, color:_BottomNavigationColor, ), title:Text( 'Home', style:TextStyle(color:_BottomNavigationColor) ) ), BottomNavigationBarItem( icon:Icon( Icons.email, color:_BottomNavigationColor, ), title:Text( 'Email', style:TextStyle(color:_BottomNavigationColor) ) ), BottomNavigationBarItem( icon:Icon( Icons.pages, color:_BottomNavigationColor, ), title:Text( 'Pages', style:TextStyle(color:_BottomNavigationColor) ) ), BottomNavigationBarItem( icon:Icon( Icons.airplay, color:_BottomNavigationColor, ), title:Text( 'AipPlay', style:TextStyle(color:_BottomNavigationColor) ) ), ], type:BottomNavigationBarType.fixed ), ); }} 效果已经出现，在APP的页面上已经出现了一个底部导航栏，只不过现在还点击还没有什么效果。 接下来是实现点击效果：子页面的编写子页面我们就采用最简单的编写了，只放入一个AppBar和一个Center，然后用Text Widget表明即可。 先来写一个HomeScreen组件，新建一个pages目录，然后在目录下面新建home_screen.dart文件。 123456789101112131415import 'package:flutter/material.dart';class HomeScreen extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar:AppBar( title: Text('HOME'), ), body:Center( child: Text('HOME'), ) ); }} 有了这个文件剩下的文件就可以复制粘贴，然后改少量的代码来完成了。 分别建立: email_screen.dart pages_screen.dart airplay_screen.dart 这些都是导航要用的子页面，有了这些页面，我们才能继续编写代码。 重写initState()方法我们要重新initState()方法，把刚才做好的页面进行初始化到一个Widget数组中。有了数组就可以根据数组的索引来切换不同的页面了。这是现在几乎所有的APP采用的方式。 代码如下: 12345678910List&lt;Widget&gt; list = List();@overridevoid initState(){ list ..add(HomeScreen()) ..add(EmailScreen()) ..add(PagesScreen()) ..add(AirplayScreen()); super.initState(); } 这里的..add()是Dart语言的..语法，如果你学过编程模式，你一定听说过建造者模式，简单来说就是返回调用者本身。这里list后用了..add()，还会返回list，然后就一直使用..语法，能一直想list里增加widget元素。 最后我们调用了一些父类的initState()方法。 BottomNavigationBar里的响应事件BottomNavigationBar组件里提供了一个相应事件onTap，这个事件自带一个索引值index，通过索引值我们就可以和我们list里的索引值相对应了。 12345onTap:(int index){ setState((){ _currentIndex= index; }); }, 现在给出全部的 BottomNavigationBar.dart`的全部代码，讲解我会在视频中一行一行讲解。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import 'package:flutter/material.dart';import 'pages/home_screen.dart';import 'pages/email_screen.dart';import 'pages/pages_screen.dart';import 'pages/airplay_screen.dart';class BottomNavigationWidget extends StatefulWidget { _BottomNavigationWidgetState createState() =&gt; _BottomNavigationWidgetState();}class _BottomNavigationWidgetState extends State&lt;BottomNavigationWidget&gt; { final _BottomNavigationColor = Colors.blue; int _currentIndex = 0; List&lt;Widget&gt; list = List(); @override void initState(){ list ..add(HomeScreen()) ..add(EmailScreen()) ..add(PagesScreen()) ..add(AirplayScreen()); super.initState(); } @override Widget build(BuildContext context) { return Scaffold( body: list[_currentIndex], bottomNavigationBar: BottomNavigationBar( items: [ BottomNavigationBarItem( icon:Icon( Icons.home, color:_BottomNavigationColor, ), title:Text( 'Home', style:TextStyle(color:_BottomNavigationColor) ) ), BottomNavigationBarItem( icon:Icon( Icons.email, color:_BottomNavigationColor, ), title:Text( 'Email', style:TextStyle(color:_BottomNavigationColor) ) ), BottomNavigationBarItem( icon:Icon( Icons.pages, color:_BottomNavigationColor, ), title:Text( 'Pages', style:TextStyle(color:_BottomNavigationColor) ) ), BottomNavigationBarItem( icon:Icon( Icons.airplay, color:_BottomNavigationColor, ), title:Text( 'AipPlay', style:TextStyle(color:_BottomNavigationColor) ) ), ], currentIndex:_currentIndex, onTap:(int index){ setState((){ _currentIndex= index; }); }, type:BottomNavigationBarType.fixed ), ); }} 最后实现的效果：1. 2.​ 再次申明：本文引用https://jspang.com/detailed?id=45#toc28 进行学习。","link":"/2020/06/05/Flutter%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E6%A0%8F/"},{"title":"Flutter实现网络请求以及加载ListView","text":"动态加载ListView 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import 'package:flutter/material.dart';import 'dart:io';import 'dart:convert';void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', theme: ThemeData( primarySwatch: Colors.blue, ), home: Scaffold( appBar: AppBar(title: Text('Flutter Demo')), body: MyHomeWidget())); }}class MyHomeWidget extends StatelessWidget { @override Widget build(BuildContext context) { return ListView( children: ListTile.divideTiles(context: context, tiles: [ ListTile( leading: Image.network( \"https://avatars3.githubusercontent.com/u/6915570?s=460&amp;v=4\"), title: Text('我是标题1'), subtitle: Text('我是副标题1'), trailing: Icon(Icons.chevron_right)), ListTile( leading: Image.network( \"https://avatars3.githubusercontent.com/u/6915570?s=460&amp;v=4\"), title: Text('我是标题2'), subtitle: Text('我是副标题2'), trailing: Icon(Icons.chevron_right)), ListTile( leading: Image.network( \"https://avatars3.githubusercontent.com/u/6915570?s=460&amp;v=4\"), title: Text('我是标题3'), subtitle: Text('我是副标题3'), trailing: Icon(Icons.chevron_right)), ListTile( leading: Image.network( \"https://avatars3.githubusercontent.com/u/6915570?s=460&amp;v=4\"), title: Text('我是标题4'), subtitle: Text('我是副标题4'), trailing: Icon(Icons.chevron_right)), ListTile( leading: Image.network( \"https://avatars3.githubusercontent.com/u/6915570?s=460&amp;v=4\"), title: Text('我是标题5'), subtitle: Text('我是副标题5'), trailing: Icon(Icons.chevron_right)), ]).toList(), ); }} 效果 网络请求实现1.依赖添加​ 在pubspec.yaml 文件中添加 http请求依赖 1http: ^0.11.3+17 ​ 1.添加http包装该http软件包提供了从Internet提取数据的最简单方法。 要安装该http软件包，请将其添加到pubspec.yaml文件的“ dependencies”部分。您可以找到pub.dev http软件包的最新版本 。 content_copy 12dependencies: http: &lt;latest_version&gt; 导入http包。 content_copy 1import 'package:http/http.dart' as http; 2.发出网络请求本食谱介绍如何使用JSONPlaceholderhttp.get()方法获取样本专辑 。 content_copy 123Future&lt;http.Response&gt; fetchAlbum() { return http.get('https://jsonplaceholder.typicode.com/albums/1');} 该http.get()方法返回Future包含的Response。 Future是用于处理异步操作的核心Dart类。Future对象表示将来某个时候可用的潜在值或错误。 本http.Response类包含一个成功的HTTP调用接收到的数据。 3.将响应转换为自定义Dart对象发出网络请求很容易，但是使用原始 Future&lt;http.Response&gt;操作并不是很方便。为了使您的生活更轻松，请将转换http.Response为Dart对象。 建立Album课程首先，创建一个Album包含来自网络请求的数据的类。它包括一个Album从JSON 创建一个工厂构造函数。 手动转换JSON只是一种选择。有关更多信息，请参阅JSON和序列化的完整文章 。 content_copy 123456789101112131415class Album { final int userId; final int id; final String title; Album({this.userId, this.id, this.title}); factory Album.fromJson(Map&lt;String, dynamic&gt; json) { return Album( userId: json['userId'], id: json['id'], title: json['title'], ); }} 将转换http.Response为Album现在，使用以下步骤更新该fetchAlbum() 函数以返回a Future&lt;Album&gt;： Map使用dart:convert包将响应主体转换为JSON 。 如果服务器确实返回了状态代码为200的OK响应，则 使用factory方法将JSON Map转换为。Album``fromJson() 如果服务器未返回状态码为200的OK响应，则引发异常。（即使在“ 404未找到”服务器响应的情况下，也会引发异常。请勿返回null。这在检查中的数据时很重要snapshot，如下所示。） content_copy 12345678910111213Future&lt;Album&gt; fetchAlbum() async { final response = await http.get('https://jsonplaceholder.typicode.com/albums/1'); if (response.statusCode == 200) { // If the server did return a 200 OK response, // then parse the JSON. return Album.fromJson(json.decode(response.body)); } else { // If the server did not return a 200 OK response, // then throw an exception. throw Exception('Failed to load album'); }} 万岁！现在，您有了一个可以从互联网上获取专辑的功能。 4.提取数据fetch()在 initState()或didChangeDependencies() 方法中调用方法。 该initState()方法仅被调用一次，然后不再调用。如果您希望选择重新加载API以响应 InheritedWidget更改，请将该调用放入 didChangeDependencies()方法中。请参阅State以获取更多详细信息。 content_copy 12345678class _MyAppState extends State&lt;MyApp&gt; { Future&lt;Album&gt; futureAlbum; @override void initState() { super.initState(); futureAlbum = fetchAlbum(); } 下一步将使用此Future。 5.显示数据要在屏幕上显示数据，请使用 FutureBuilder小部件。该FutureBuilder小部件随Flutter一起提供，可轻松使用异步数据源。 您必须提供两个参数： 在Future你想要的工作。在这种情况下，将来从fetchAlbum()函数返回。 一builder，告诉扑功能呈现什么，取决于状态Future：加载，成功或错误。 请注意，snapshot.hasData仅true 当快照包含非空数据值时才返回。这就是fetchAlbum即使在“ 404 Not Found”服务器响应的情况下，函数也应引发异常的原因。如果fetchAlbum返回，null 则微调框将无限期显示。 content_copy 12345678910111213FutureBuilder&lt;Album&gt;( future: futureAlbum, builder: (context, snapshot) { if (snapshot.hasData) { return Text(snapshot.data.title); } else if (snapshot.hasError) { return Text(&quot;${snapshot.error}&quot;); } // By default, show a loading spinner. return CircularProgressIndicator(); },); 为什么在initState（）中调用fetchAlbum（）？尽管很方便，但不建议将API调用放入build()方法中。 Flutter build()每当需要更改视图中的任何内容时都会调用该方法，并且这种情况经常出乎意料地发生。将fetch调用留在您的build()方法中会使不必要的调用泛滥到API中，并降低您的应用速度。 https://flutter.dev/docs/cookbook/testing/unit/mocking) 完整的例子content_copy 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586import 'dart:async';import 'dart:convert';import 'package:flutter/material.dart';import 'package:http/http.dart' as http;Future&lt;Album&gt; fetchAlbum() async { final response = await http.get('https://jsonplaceholder.typicode.com/albums/1'); if (response.statusCode == 200) { // If the server did return a 200 OK response, // then parse the JSON. return Album.fromJson(json.decode(response.body)); } else { // If the server did not return a 200 OK response, // then throw an exception. throw Exception('Failed to load album'); }}class Album { final int userId; final int id; final String title; Album({this.userId, this.id, this.title}); factory Album.fromJson(Map&lt;String, dynamic&gt; json) { return Album( userId: json['userId'], id: json['id'], title: json['title'], ); }}void main() =&gt; runApp(MyApp());class MyApp extends StatefulWidget { //构造函数 接收值 MyApp({Key key}) : super(key: key); @override _MyAppState createState() =&gt; _MyAppState();}class _MyAppState extends State&lt;MyApp&gt; { Future&lt;Album&gt; futureAlbum; @override void initState() { super.initState(); futureAlbum = fetchAlbum(); } @override Widget build(BuildContext context) { return MaterialApp( title: 'Fetch Data Example', theme: ThemeData( primarySwatch: Colors.blue, ), home: Scaffold( appBar: AppBar( title: Text('Fetch Data Example'), ), body: Center( child: FutureBuilder&lt;Album&gt;( future: futureAlbum, builder: (context, snapshot) { if (snapshot.hasData) { return Text(snapshot.data.title); } else if (snapshot.hasError) { return Text(&quot;${snapshot.error}&quot;); } // By default, show a loading spinner. return CircularProgressIndicator(); }, ), ), ), ); }} 完整效果​","link":"/2020/06/03/Flutter%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"},{"title":"Flutter页面跳转的二种方式","text":"页面跳转的二种方式（不传值与传值）main.dart文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101import 'package:flutter/material.dart';import 'package:xionghuaqiang/NewRoute.dart';void main() { runApp(MyApp());}class MyApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', theme: ThemeData( primarySwatch: Colors.blue, visualDensity: VisualDensity.adaptivePlatformDensity, ), home: MyHomePage(title: '主页'), ); }}class MyHomePage extends StatefulWidget { MyHomePage({Key key, this.title}) : super(key: key); // This widget is the home page of your application. It is stateful, meaning // that it has a State object (defined below) that contains fields that affect // how it looks. // This class is the configuration for the state. It holds the values (in this // case the title) provided by the parent (in this case the App widget) and // used by the build method of the State. Fields in a Widget subclass are // always marked &quot;final&quot;. final String title; @override _MyHomePageState createState() =&gt; _MyHomePageState();}class _MyHomePageState extends State&lt;MyHomePage&gt; { int _counter = 0;//// void _incrementCounter() {// setState(() {// // This call to setState tells the Flutter framework that something has// // changed in this State, which causes it to rerun the build method below// // so that the display can reflect the updated values. If we changed// // _counter without calling setState(), then the build method would not be// // called again, and so nothing would appear to happen.// _counter = _counter+2;// });//// } @override Widget build(BuildContext context) { // This method is rerun every time setState is called, for instance as done // by the _incrementCounter method above. // // The Flutter framework has been optimized to make rerunning build methods // fast, so that you can just rebuild anything that needs updating rather // than having to individually change instances of widgets. return Scaffold( appBar: AppBar( // Here we take the value from the MyHomePage object that was created by // the App.build method, and use it to set our appbar title. title: Text(widget.title), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ FlatButton( child: Text(&quot;open new route&quot;), textColor: Colors.blue, onPressed: () { //导航到新路由 Navigator.push( context, MaterialPageRoute(builder: (context) { return NewRoute(); })); }, ), new Text( 'You have pushed the button this many times:', ), ], ), ),// floatingActionButton: FloatingActionButton(// onPressed: _incrementCounter,// tooltip: 'Increment',// child: Icon(Icons.add),// ), // This trailing comma makes auto-formatting nicer for build methods. ); }} 然后我们再新建一个NewRoute.dart 123456789101112131415import 'package:flutter/material.dart';class NewRoute extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(&quot;New route&quot;), ), body: Center( child: Text(&quot;欢迎来到新页面&quot;), ), ); }} 效果： ​ 二：点击open new route ​ ​ 带值传递：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import 'package:flutter/material.dart';import 'package:routerdemo/TipRoute.dart';void main() { runApp(MyApp());}class MyApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', theme: ThemeData( primarySwatch: Colors.blue, visualDensity: VisualDensity.adaptivePlatformDensity, ), home: MyHomePage(title: '主页'), ); }}class MyHomePage extends StatefulWidget { MyHomePage({Key key, this.title}) : super(key: key); final String title; @override _MyHomePageState createState() =&gt; _MyHomePageState();}class _MyHomePageState extends State&lt;MyHomePage&gt; { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Center(// child: Column(// mainAxisAlignment: MainAxisAlignment.center,// children: &lt;Widget&gt;[// FlatButton(// child: Text(&quot;open new route&quot;),// textColor: Colors.blue,// onPressed: () {// //导航到新路由// Navigator.push( context,// MaterialPageRoute(builder: (context) {// return NewRoute();// }));// },// ),// new Text(// 'You have pushed the button this many times:',// ),// ]// ), child: RaisedButton( //点击事件 onPressed: () async { // 打开`TipRoute`，并等待返回结果 var result = await Navigator.push( context, MaterialPageRoute( builder: (context) { //构造方法传参 return TipRoute( // 路由参数 text: &quot;我是提示xxxx&quot;, ); }, ), ); //输出`TipRoute`路由返回结果 print(&quot;路由返回值: $result&quot;); }, child: Text(&quot;打开提示页&quot;), ), ), ); }} ​","link":"/2020/06/04/Flutter%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%9A%84%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F/"},{"title":"Flutter登陆页面制作","text":"这个资料是参考网上一哥们的项目过来改了一下，一下找不到他文章地址了，这里就先说声抱歉了。 main.dart文件 1234567891011121314151617181920212223242526import 'package:flutter/material.dart';import 'login.dart';void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo',// theme: ThemeData(// primarySwatch: Colors.blue,// ), home: MyHomePage(), ); }}class MyHomePage extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( home: Login(), ); }} Login.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182import 'package:flutter/material.dart';class Login extends StatefulWidget { @override _Login createState() =&gt; new _Login();}class _Login extends State&lt;Login&gt; { //获取Key用来获取Form表单组件 GlobalKey&lt;FormState&gt; loginKey = new GlobalKey&lt;FormState&gt;(); String userName; String password; bool isShowPassWord = false; void login(){ //读取当前的Form状态 var loginForm = loginKey.currentState; //验证Form表单 if(loginForm.validate()){ loginForm.save(); print('userName: ' + userName + ' password: ' + password); } } void showPassWord() { setState(() { isShowPassWord = !isShowPassWord; }); } @override Widget build(BuildContext context){ return new MaterialApp( title: 'Form表单示例', home: new Scaffold( body: new Column( children: &lt;Widget&gt;[ new Container( padding: EdgeInsets.only(top: 100.0, bottom: 10.0),// child: new Text(// 'LOGO',// style: TextStyle(// color: Color.fromARGB(255, 53, 53, 53),// fontSize: 50.0// ),// ) child: new Image.network( 'http://img.m5f.cn/2.png', width: 150.0, height: 100.0, ) ), new Container( padding: const EdgeInsets.all(16.0), child: new Form( key: loginKey, autovalidate: true, child: new Column( children: &lt;Widget&gt;[ new Container( decoration: new BoxDecoration( border: new Border( bottom: BorderSide( color: Color.fromARGB(255, 240, 240, 240), width: 1.0 ) ) ), child: new TextFormField( decoration: new InputDecoration( labelText: '请输入手机号', labelStyle: new TextStyle( fontSize: 15.0, color: Color.fromARGB(255, 93, 93, 93)), border: InputBorder.none, // suffixIcon: new IconButton( // icon: new Icon( // Icons.close, // color: Color.fromARGB(255, 126, 126, 126), // ), // onPressed: () { // }, // ), ), keyboardType: TextInputType.phone, onSaved: (value) { userName = value; }, validator: (phone) { // if(phone.length == 0){ // return '请输入手机号'; // } }, onFieldSubmitted: (value) { }, ), ), new Container( decoration: new BoxDecoration( border: new Border( bottom: BorderSide( color: Color.fromARGB(255, 240, 240, 240), width: 1.0 ) ) ), child: new TextFormField( decoration: new InputDecoration( labelText: '请输入密码', labelStyle: new TextStyle( fontSize: 15.0, color: Color.fromARGB(255, 93, 93, 93)), border: InputBorder.none, suffixIcon: new IconButton( icon: new Icon( isShowPassWord ? Icons.visibility : Icons.visibility_off, color: Color.fromARGB(255, 126, 126, 126), ), onPressed: showPassWord, ) ), obscureText: !isShowPassWord, onSaved: (value) { password = value; }, ), ), new Container( height: 45.0, margin: EdgeInsets.only(top: 40.0), child: new SizedBox.expand( child: new RaisedButton( onPressed: login,// color: Color.fromARGB(255, 61, 203, 128), color: Colors.blue, child: new Text( '登录', style: TextStyle( fontSize: 14.0, color: Color.fromARGB(255, 255, 255, 255) ), ), shape: new RoundedRectangleBorder(borderRadius: new BorderRadius.circular(45.0)), ), ), ), new Container( margin: EdgeInsets.only(top: 30.0), padding: EdgeInsets.only(left: 8.0, right: 8.0), child: new Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: &lt;Widget&gt;[ new Container( child: Text( '注册账号', style: TextStyle( fontSize: 13.0, color: Color.fromARGB(255, 53, 53, 53) ), ), ), Text( '忘记密码？', style: TextStyle( fontSize: 13.0, color: Color.fromARGB(255, 53, 53, 53) ), ), ], ) , ), ], ), ), ) ], ), ), ); }} 运行效果：​","link":"/2020/06/08/Flutter%E7%99%BB%E9%99%86%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/"},{"title":"Maven入门配置","text":"下载安装包我就不说了，想必大家毒知道； 2.【环境变量配置】在环境变量（此处是指win10）中，新建MAVEN_HOME，设置为：E:\\maven\\apache-maven-3.6.1; 修改classpath变量，在原值之后添加%MAVEN_HOME%bin;。classpath变量的取值通过分号进行分隔。 path变量中添加bin文件夹位置变量E:\\maven\\apache-maven-3.6.1\\bin。 配置完成后在cmd命令行中输入mvn -v，出现如下图代表环境配置成功 ok了，配置Maven之前一定得先配置java环境变量。","link":"/2020/03/03/Maven%E5%85%A5%E9%97%A8%E9%85%8D%E7%BD%AE/"},{"title":"SpringBoot基于thyeleaf实现邮件发送","text":"SpringBoot基于Thyeleaf实现邮件发送邮件发送其实是一个非常常见的需求，用户注册，找回密码等地方，都会用到，使用 JavaSE 代码发送邮件，步骤还是挺繁琐的，Spring Boot 中对于邮件发送，提供了相关的自动化配置类，使得邮件发送变得非常容易，本文我们就来一探究竟！ 准备 我们以QQ邮件为例，第一步申请授权码： 点击开启，开启相关功能，开启过程需要手机号码验证，按照步骤操作即可，不赘述。开启成功之后，即可获取一个授权码，将该号码保存好，一会使用。项目创建 引入邮件发送依赖：#####接下来在 application.properties 中配置邮箱的基本信息： spring.mail.host=smtp.qq.com spring.mail.port=587 spring.mail.username=xhq@m5f.cn //填你自己的 spring.mail.password=ubknfzhjkhrbbabe //填你的授权码 spring.mail.default-encoding=UTF-8 spring.mail.properties.mail.smtp.socketFactoryClass=javax.net.ssl.SSLSocketFactory spring.mail.properties.mail.debug=true 含义：SMTP 服务器的端口 配置邮箱用户名 配置密码，注意，不是真正的密码，而是刚刚申请到的授权码 默认的邮件编码 配饰 SSL 加密工厂 表示开启 DEBUG 模式，这样，邮件发送过程的日志会在控制台打印出来，方便排查错误 配置 SMTP 服务器地址使用 Thymeleaf 作邮件模板 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt;然后，创建 Thymeleaf 邮件模板： 然后，创建 Thymeleaf 邮件模板：&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; //一定要导入 &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;hello 欢迎加入 xxx 大家庭，您的入职信息如下：&lt;/p&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td th:text=&quot;${username}&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;工号&lt;/td&gt; &lt;td th:text=&quot;${num}&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;薪水&lt;/td&gt; &lt;td th:text=&quot;${salary}&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;div style=&quot;color: #ff1a0e&quot;&gt;一起努力创造辉煌&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;接下来发送邮件： @Autowired JavaMailSender javaMailSender; @Autowired TemplateEngine templateEngine; //待发送的邮件 String[] email ={&quot;xx@qq.com&quot;}; @RequestMapping(&quot;hello&quot;) public void sendThymeleafMail() throws MessagingException { MimeMessage mimeMessage = javaMailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true); helper.setSubject(&quot;基于SpringBoot实现邮件发送&quot;); // 你的邮件 helper.setFrom(&quot;xx@qq.comm&quot;); helper.setTo(email); // helper.setCc(&quot;37xxxxx37@qq.com&quot;); // helper.setBcc(&quot;14xxxxx098@qq.com&quot;); helper.setSentDate(new Date()); Context context = new Context(); context.setVariable(&quot;username&quot;, &quot;xx&quot;); context.setVariable(&quot;num&quot;,&quot;22&quot;); context.setVariable(&quot;salary&quot;, &quot;99999&quot;); String process = templateEngine.process(&quot;mail.html&quot;, context); helper.setText(process,true); javaMailSender.send(mimeMessage); }效果图 本案例我已经上传github,可以下载查看效果。本地运行 localhost:8080/index.htmlgithub项目地址：https://github.com/xionghuaqiang/cn.m5f","link":"/2020/03/10/SpringBoot%E5%9F%BA%E4%BA%8Ethyeleaf%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"},{"title":"Maven创建Web项目","text":"IDEA创建Maven Web项目；在Idea中创建Maven项目由二种方案： 在Idea中创建Maven项目由二种方案：1.创建javaSE项目，然后改成Web项目；（我们讲这种方式） 2.通过Maven创建项目的时候，选择他的Web骨架；改造 JavaSE 项目首先我们新建一个Maven JavaSE项目创建项目过程中不用选择，直接下一步； 创建完成后，我们下pom.xml中添加，如下图； &lt;packaging&gt;war&lt;/packaging&gt; 然后，选中 JavaSE 工程，右键单击，选择 Open Module Settings，或者直接按 F4，然后选择 Web，直接确认就可以，如下图： 接下来，在 webapp 目录中，（上面的加号中添加）添加 web.xml 文件。（看图上的说明）配置完成后，点击 OK 退出。 项目创建完成后，接下来就是部署tomcat服务器。 部署，首先点击 IDEA 右上角的 Edit Configurations： 接下来选择 Deployment 选项卡，配置要发布的项目： 最后，自己创建jsp页面，点击 IDEA 右上角的三角符号，启动项目。 看看效果吧！ 有更多问题可以添加我微信；","link":"/2020/03/06/Maven%E5%88%9B%E5%BB%BAWeb%E9%A1%B9%E7%9B%AE/"},{"title":"SpringBoot常见问题","text":"1.什么是SpringBoot？ ​ SpringBoot是一个能快速搭建一个基于Spring的应用程序，在传统的SSM框架组合配置繁琐,有大量的重复代码，严重影响了我们Java工程师的开发效率，而SpringBoot呢，就为我们对Spring家族跟一些第三方库进行了自动化的Starter，并且消除了我们的XMl。 2.SpringBoot的装配原理（starter） ​ 首先，这Starter并不是一个新技术,基本还是基于Spring已有的功能来实现的。首先它提供了一个自动化的配置类，一般命名xxxAutoConfigration,在这个配置类中通过条件注解来决定一个配置是否生效（@Conditional）,然后呢他也还会提供一系列的默认配置，允许开发者根据实际情况自定义相关配置，通过类的安全属性将这些配置属性注入进来，新的属性就会代替掉默认的属性，比如Spring Security中，正因为这个，很多第三方框架，我们只需要映入他的依赖就可以直接使用了。 3.SrpingBoot有什么特点 ​ 1.为Spring开发提供了一个更快，更广泛的入门体验。 ​ 2.开箱即用，不用再配置乱七八糟的XML。 ​ 3.规定的约定大于配置。 ​ 4.提供了一系列大型项目通用的非业务型功能，例如: 内嵌服务器，安全管理，运行数据监控。 4.SpringBoot中spring-boor-starter-parent有什么作用​ 1.定义了Java编辑版本为1.8 ​ 2.编码规范为UTF-8 ​ 3.继承了spring-boot-dependenices,在这里面定义了依赖的版本，所以我们写依赖时部分不用写版本号。 ​ 4.执行打包操作的配置 ​ 5.自动化的资源过滤。 ​ 6.针对application.properties和application.yaml的资源进行了过滤。 5.SpringBoot中打包的Jar与普通的jar有什么不同？​ Springboot中打包jar是可执行的Jar也就是可以通过 java -jar xxx.jar命令来运行的，并且不能被其它项目依赖，这其中呢，主要跟他的结构有关，普通的jar,解压之后就是包名，包里面就是我们的代码，而SpringBoot呢打包成的jar解压之后，在\\BOOT-INF\\classes目录下才是我们的代码，因此无法被其它项目依赖； 6.什么是Spring Data?​ Spring Data是Spring的一个子项目,用于简化数据库的访问，支持NoSQL和关系储存，其主要目标就是让数据库访问方面快捷。Spring Data具有如下特点： ​ 1.Spring Data项目支持NoSQL存储： ​ 2.MongDB(文档数据库) ​ 3.Redis(key/value存储) ​ 4.Neo4j (图形数据库) ​ 5.Hbase(列族数据库) 7.SpringBoot中如何解决跨域问题​ 在传统的SSM中解决跨域呢是在XML文件中配置CORS,在我们的SpringBoot中通过@CrossOrigin注解来解决跨域，也跨域 重写addCorsMappings来实现解决跨域； ​","link":"/2020/05/08/SpringBoot%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"title":"几分钟解决SpringBoot整合Myabtis","text":"SpringBoot整合Mybatis XML形式 项目创建我就不演示了，我将项目需要的依赖列出来： 123456789101112131415161718192021 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;version&gt;5.1.27&lt;/version&gt;&lt;/dependency&gt; 数据库的配置：application.properties12345#替换成你自己的即可spring.datasource.username=rootspring.datasource.password=123456 spring.datasource.url=jdbc:mysql://localhost:3306/bigjava18?userUnicode=true&amp;characterEncoding=UTF-8spring.datasource.type=com.alibaba.druid.pool.DruidDataSource 配置好数据库后，接下来我们定义一个实体类：​ 123456789101112131415161718192021222324252627282930313233343536373839404142/** * @author xhq * @date 2020/5/5 8:52 */public class User { private int id; private String username; private String address; @Override public String toString() { return &quot;User{&quot; + &quot;id=&quot; + id + &quot;, username='&quot; + username + '\\'' + &quot;, address='&quot; + address + '\\'' + '}'; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; }} 接下来呢定义一个mapper；​ 创建一个UserMapper接口： 12345public interface UserMapper { List&lt;User&gt; getAllUser();} 定义完之后我们就需要来创建 UserMapper.XML了,将相应的地址填写成你自己的即可 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;cn.m5f.springbootmyabtis.mapper.UserMapper&quot;&gt; &lt;select id=&quot;getAllUser&quot; resultType=&quot;cn.m5f.springbootmyabtis.entil.User&quot;&gt; select * from user; &lt;/select&gt;&lt;/mapper&gt; 项目目录： 在这些都创建完成之后，我们创建UserController123456789101112131415/** * @author xhq * @date 2020/5/5 8:58 */@RestControllerpublic class MyController { @Autowired UserMapper userMapper; @GetMapping(&quot;/hello&quot;) public List&lt;User&gt; selectUser(){ return userMapper.getAllUser(); }} 最后别忘了在主配置类中添加：@MapperScan(basePackages =”cn.m5f.springbootmyabtis”（替换成你自己的路径哟）(将你写的Myabtis扫描进去)接下来让我们来运行一下吧： 项目我已经上传到Git上，需要的同学可以去下载：https://github.com/xionghuaqiang/cn.m5f","link":"/2020/05/06/SpringBoot%E6%95%B4%E5%90%88Mybatis%E4%BB%A5XML%E5%BD%A2%E5%BC%8F/"},{"title":"idea中使用jq出现下划线","text":"今天在使用idea写ajax的时候遇到出现下划线的问题 问题如图： 解决方案：点击右下角的人物头像， 拉到None即可 是不是发现ok了","link":"/2020/03/29/idea%E4%B8%AD%E4%BD%BF%E7%94%A8jq%E5%87%BA%E7%8E%B0%E4%B8%8B%E5%88%92%E7%BA%BF/"},{"title":"idea导入项目类出现时钟标志","text":"Idea导入项目出现时钟标志解决方法 问题如图: 出现问题的原因：没有将项目添加的Maven解决方案：找到项目的xml文件，鼠标右键 Add as Maven project 即可成功截图：","link":"/2020/04/01/idea%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E7%B1%BB%E5%87%BA%E7%8E%B0%E6%97%B6%E9%92%9F%E6%A0%87%E5%BF%97/"},{"title":"SpringBoot项目部署到服务器","text":"今天就让强哥手把手教你部署SpringBoot项目到服务器上（jar方式）强哥这里拿一个音乐项目，当然你可以拿你自己的SpringBoot项目 1.这是我们的项目目录结构 2.第一步生成jar，这里我们只需用Maven为我们提供的打包方式即可，点击右边的package. 3.完成之后会在target下生成一个已jar结尾的架包，这是生成完成之后的图片。 4.接下来我们就需要将自己的jar上传到服务器上了，上传过程我就不截图了，我使用的是WinScp上传工具。 5.这变把项目运行起来了，Get到了吗? 我的项目地址：点击打开 更多问题可以添加我微信联系我。 更多问题可以添加我微信联系我。","link":"/2020/03/03/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"equals所引出的空指针异常","text":"equals所引出的空指针异常”java.lang.NullPointerException”空指针异常是平常遇到算是很头痛的异常了通常我们比较字符串是否相等，我们会用equals来比较； 其实这其中便隐含了一个空指针异常，让我们来运行一下，下面的代码吧！String a =null; System.out.println(a.equals(&quot;3&quot;)); 已知的变量去比未知变量其实解决这个问题的办法很简单，我们只需要用已知的变量去比未知变量就可以了String a =null; System.out.println(&quot;3&quot;.equals(a));因为a=null,没有在内存中开辟空间，用一个什么都没有的东西去比较，自然会是不对的","link":"/2020/03/08/equals%E6%89%80%E5%BC%95%E5%87%BA%E7%9A%84%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/"},{"title":"字符串的比较","text":"今天我们来说说String字符串的比较String a =&quot;124&quot;; String b =&quot;124&quot;; 那么 a==b输出是结果是什么？ 想必你心中已经有答案了，对，结果是true;因为 “==”他比较的是栈中内存地址是否相同，所以我们自定义的变量 a==b 是相等的。那下面二个字符串的比较又是什么情况呢？ String a =&quot;124&quot;; String b = new String(&quot;124&quot;);a==b输出的结果是什么呢？答案是false;因为new出来的内容，他会在堆内存中开辟一个新的空间，而我们直接定义的变量所指向的是一个堆内容中的空间。他们二个内存地址是不同的，所以输出的是false 以上便是我对String字符串的比较的理解，可能还比较浅，大家有更多想法可以提出来。","link":"/2020/03/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83/"},{"title":"jpa整合SpringBoot数据库自定义编码格式","text":"SpringBoot构建jpa数据库自定义编码格式今天使用jpa构建应用时，遇到点问题，jpa创建数据库默认编码格式为latin1,导致我插入数据失败。 先看问题吧： 我输入的是字符串类型，但他还是报了个类型不匹配，后面才发现是编码格式的问题 解决问题：我们只需要重写 MySQL5Dialect，然后自定路径即可 我们只需要重写 MySQL5Dialect，然后自定路径即可 自定义Config，继承MySQL5Dialect @Component @SuppressWarnings(&quot;deprecation&quot;) public class MysqlConfig extends MySQL5Dialect { @Override public String getTableTypeString() { return &quot;ENGINE=InnoDB DEFAULT CHARSET=utf8&quot;; } } properties自定义为自己路径即可 让我们看看效果吧!","link":"/2020/04/05/jpa%E6%95%B4%E5%90%88SpringBoot%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"},{"title":"安装Android Studio出现‘'..classpath'","text":"安装Android Stuido 出现“Could not resolve all artifacts for configuration ‘classpath’” 前几天不小心在清理垃圾的时候，把Android Sutdio删掉了，今天重新下的时候遇到点小问题，如标题， 在网上寻找方案后，找到一个能用的，如下 解决方案：repositories { google() mavenCentral() // add jcenter() }添加如图代码即可，如一遍没有加载成功，多加载即便即可","link":"/2020/04/19/%E5%AE%89%E8%A3%85Android-Studio%E5%87%BA%E7%8E%B0%E2%80%98-classpath/"},{"title":"linux常用命令","text":"整理一份自己常用Linux命令（未完） 命令 解释 cd.. 返回上一级 mkdir xx 创建xx文件夹 chmod 777/www 将www文件夹权限修改为777（最大） ls www 查看www文件夹下的子目录 cd www 进入www文件夹下 shutdown-h now root登陆下，立刻关机 shutdown-r now root登陆下，立刻重启 cd / 进入根目录 firewall-cmd - -query-port=6379/tcp 查询redis端口是否开放 firewall-cmd - -permanent –add-port=6379/tcp 开放6379端口","link":"/2020/03/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"微信公众号开发","text":"微信公众号开发的大致几个步骤： ##### 用户发送信息 ——&gt;微信服务器——&gt;我们自己的服务器——&gt;返回给微信服务器——&gt;返回用户 具体可以参考微信公众号开发文档，我这里有个小Demo,(效果) github下载地址：https://github.com/xionghuaqiang/cn.m5f","link":"/2020/03/28/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"},{"title":"快速排序求数组中出现次数超过[n/2]次元素","text":"给定一个大小为n的数组，找出数组中出现次数超过【n/2】次的元素。 例如:int[] arrays {1,2,3,4,1,1,,1} 出现次数超过【n/2】的元素为：1解答：快速排序法： public static void main(String[] args) { int[] arrays = {1,2,3,4,1,1,1,}; //快速排序 Arrays.sort(arrays); System.out.println(arrays[arrays.length/2]); }思路：题中给出要求，我们求出现超过n/2次的元素，若我们将数组进行升序或降序排序后，出现次数超过【n/2】次的，一个超过了数组的中位数；故我们只需求出数组中间那位数；运行结果：","link":"/2020/03/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%B1%82%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87-n-2-%E6%AC%A1%E5%85%83%E7%B4%A0/"},{"title":"数组越界异常","text":"数组越界异常分析 数组越界异常可以说是我们见过最多的异常之一了，让我们记住这个异常吧。java.lang.ArrayIndexOutOfBoundsException你发现一下代码会抛什么异常嘛？int[] array = new int[]{1,2,3}; for (int i = 0; i &lt;=array.length; i++) { System.out.println(array[i]); } 对的，抛的就是 java.lang.ArrayIndexOutOfBoundsException 让我们来了解一下为什么会抛异常吧！ 当 i从0一直加，加到3的时候，就已经有4位了，而数组内只有3个内容，所以抛出了这个异常；","link":"/2020/03/07/%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E5%BC%82%E5%B8%B8/"},{"title":"数据库高频面试题","text":"数据库问题：（未完）基础篇： 问题 我的理解 1. 为什么要使用数据库 1.方便,不用自己手动查找 2.系统需要纪录用户的信息3.更快信息展现给用户 2.什么是MySQL? 1.mysql众多数据库的一种，2.是数据库管理系统 3.数据库三大原则是什么 1.即第一范式要求确保表中每列的原子性，也就是不可拆分；2.第二范式要求确保表中每列与主键相关，而不能只与主键的某部分相关（主要针对联合主键），主键列与非主键列遵循完全函数依赖关系，也就是完全依赖；第三范式确保主键列之间没有传递函数依赖关系，也就是消除传递依赖","link":"/2020/03/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"title":"更新本地代码到github","text":"1.本地新建文件夹，将github地址与本地联系起来。 git clone 你项目地址2.git status查看状态（需cd进入你项目名下） 3.更新本地代码到github上 1. 使用git add * –代表更新全部 接着输入git commit -m “更新说明”(commit只是提交到缓存区域) git push origin master, (将缓存区的代码上传到分支上)","link":"/2020/03/24/%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0github/"},{"title":"我用自己的方法实现了Android复选框","text":"###### 我用自己的方法实现了Android复选框，简单又实用。XML布局文件 &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot;&gt; &lt;CheckBox android:id=&quot;@+id/nc&quot; android:layout_width=&quot;120dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;南昌&quot;/&gt; &lt;CheckBox android:id=&quot;@+id/bj&quot; android:layout_width=&quot;120dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;北京&quot;/&gt; &lt;CheckBox android:id=&quot;@+id/sh&quot; android:layout_width=&quot;120dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;上海&quot;/&gt; &lt;/LinearLayout&gt; &lt;Button android:onClick=&quot;qr&quot; android:layout_width=&quot;120dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;确认&quot;/&gt; &lt;/LinearLayout&gt;接下来我们看看java代码如何实现package com.example.newland.checkbox; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.view.View.OnClickListener; import android.widget.CheckBox; import android.widget.CompoundButton; import android.widget.Toast; import java.util.ArrayList; public class MainActivity extends AppCompatActivity { CheckBox nc; CheckBox bj; CheckBox sh; ArrayList&lt;String&gt; st = new ArrayList&lt;&gt;(); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); nc = findViewById(R.id.nc); bj = findViewById(R.id.bj); sh = findViewById(R.id.sh); nc.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton compoundButton, boolean b) { if(b){ st.add(&quot;南昌&quot;); }else { st.remove(&quot;南昌&quot;); } } }); bj.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton compoundButton, boolean b) { if(b){ st.add(&quot;北京&quot;); }else { st.remove(&quot;北京&quot;); } } }); sh.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton compoundButton, boolean b) { if(b){ st.add(&quot;上海&quot;); }else { st.remove(&quot;上海&quot;); } } }); } public void qr(View view) { String s =&quot;&quot;; for (String sf:st){ s +=sf; } Toast.makeText(this, &quot;选中了&quot;+s, Toast.LENGTH_SHORT).show(); } }是不是很容易理解，对集合进行一个添加删除操作既可，有什么不同建议，可以分享给我；","link":"/2020/03/03/%E6%88%91%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%BA%86Android%E5%A4%8D%E9%80%89%E6%A1%86/"},{"title":"第一次启动Redis报错","text":"第一次启动Redis报“Creating Server TCP listening socket 127.0.0.1:6379: bind: No error” 解决方案第一次启动，Redis爆Creating Server TCP listening socket 127.0.0.1:6379: bind: No error这个异常 解决方案：输入 redis-cli.exe 127.0.0.1:6379&gt;shutdown not connected&gt;exit 然后重新运行redis-server.exe redis.windows.conf，启动成功！ 这样就可以了，我也是最近接触Redis,大家可以相互交流。","link":"/2020/03/02/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8Redis%E6%8A%A5%E9%94%99/"}],"tags":[{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"Flutter入门案例","slug":"Flutter入门案例","link":"/tags/Flutter%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"},{"name":"Flutter点击拨打电话","slug":"Flutter点击拨打电话","link":"/tags/Flutter%E7%82%B9%E5%87%BB%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/"},{"name":"Flutter导航栏实现","slug":"Flutter导航栏实现","link":"/tags/Flutter%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%AE%9E%E7%8E%B0/"},{"name":"Flutter案例","slug":"Flutter案例","link":"/tags/Flutter%E6%A1%88%E4%BE%8B/"},{"name":"Flutter跳转","slug":"Flutter跳转","link":"/tags/Flutter%E8%B7%B3%E8%BD%AC/"},{"name":"Flutter登陆页面的制作","slug":"Flutter登陆页面的制作","link":"/tags/Flutter%E7%99%BB%E9%99%86%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%88%B6%E4%BD%9C/"},{"name":"Maven入门配置","slug":"Maven入门配置","link":"/tags/Maven%E5%85%A5%E9%97%A8%E9%85%8D%E7%BD%AE/"},{"name":"SpringBoot基于Thyeleaf实现邮件发送","slug":"SpringBoot基于Thyeleaf实现邮件发送","link":"/tags/SpringBoot%E5%9F%BA%E4%BA%8EThyeleaf%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"},{"name":"Maven创建Web项目","slug":"Maven创建Web项目","link":"/tags/Maven%E5%88%9B%E5%BB%BAWeb%E9%A1%B9%E7%9B%AE/"},{"name":"SrpingBoot常见问题","slug":"SrpingBoot常见问题","link":"/tags/SrpingBoot%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"SrpingBoot整合Mybatis","slug":"SrpingBoot整合Mybatis","link":"/tags/SrpingBoot%E6%95%B4%E5%90%88Mybatis/"},{"name":"idea小技巧","slug":"idea小技巧","link":"/tags/idea%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"SpringBoot项目部署到服务器","slug":"SpringBoot项目部署到服务器","link":"/tags/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"equals所引出的空指针异常","slug":"equals所引出的空指针异常","link":"/tags/equals%E6%89%80%E5%BC%95%E5%87%BA%E7%9A%84%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/"},{"name":"Java字符串的比较","slug":"Java字符串的比较","link":"/tags/Java%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83/"},{"name":"jpa","slug":"jpa","link":"/tags/jpa/"},{"name":"安装Android Sutdio遇到的问题","slug":"安装Android-Sutdio遇到的问题","link":"/tags/%E5%AE%89%E8%A3%85Android-Sutdio%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"},{"name":"Linux常用命令","slug":"Linux常用命令","link":"/tags/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"name":"快速排序","slug":"快速排序","link":"/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"},{"name":"数组越界异常","slug":"数组越界异常","link":"/tags/%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E5%BC%82%E5%B8%B8/"},{"name":"github常用命令","slug":"github常用命令","link":"/tags/github%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"name":"Android复选框","slug":"Android复选框","link":"/tags/Android%E5%A4%8D%E9%80%89%E6%A1%86/"}],"categories":[{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"Flutter","slug":"Flutter","link":"/categories/Flutter/"},{"name":"Maven","slug":"Maven","link":"/categories/Maven/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/categories/SpringBoot/"},{"name":"idea","slug":"idea","link":"/categories/idea/"},{"name":"Exception","slug":"Exception","link":"/categories/Exception/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"},{"name":"mysql","slug":"mysql","link":"/categories/mysql/"},{"name":"git","slug":"git","link":"/categories/git/"},{"name":"Redis","slug":"Redis","link":"/categories/Redis/"}]}